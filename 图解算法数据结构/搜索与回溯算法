package com.cxx.solution;

import java.util.*;

/**
 * https://leetcode-cn.com/leetbook/read/illustration-of-algorithm
 */
public class Solution {

    //Definition for a binary tree node.
    static class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode(int x) { val = x; }
      TreeNode(int x,TreeNode left,TreeNode right) {
          this.val = x;
          this.left = left;
          this.right = right;
      }
  }

    public static void main(String[] args) {
//        System.out.println(method());
//        movingCount();
        //A树
        TreeNode treeNode1 = new TreeNode(4);
        TreeNode treeNode2 = new TreeNode(2);
        TreeNode treeNode3 = new TreeNode(5);
        TreeNode treeNode4 = new TreeNode(1);
        TreeNode treeNode5 = new TreeNode(3);
        treeNode1.left = treeNode2;
        treeNode1.right = treeNode3;
        treeNode2.left = treeNode4;
        treeNode2.right = treeNode5;
//        //B树
//        TreeNode treeNode6= new TreeNode(4);
////        TreeNode treeNode7= new TreeNode(1);
//        TreeNode treeNode7= new TreeNode(50);
//        treeNode6.left = treeNode7;
//        System.out.println(isSubStructure(treeNode1, treeNode6));
//        TreeNode mirrorTree = mirrorTree(treeNode1);
//        System.out.println(mirrorTree);
        //构造对称二叉树
//        TreeNode treeNode1 = new TreeNode(1);
//        TreeNode treeNode2 = new TreeNode(2);
//        TreeNode treeNode3 = new TreeNode(3);
//        treeNode1.left = treeNode2;
//        treeNode1.right = treeNode3;
//        System.out.println(isSymmetric(treeNode1));
//        TreeNode treeNode_3 = new TreeNode(3);
//        TreeNode treeNode_9 = new TreeNode(9);
//        TreeNode treeNode_1 = new TreeNode(1);
//        TreeNode treeNode_2 = new TreeNode(2);
//        TreeNode treeNode_20 = new TreeNode(20);
//        TreeNode treeNode_15 = new TreeNode(15);
//        TreeNode treeNode_7 = new TreeNode(7);
//        treeNode_3.left = treeNode_9;
//        treeNode_3.right = treeNode_20;
//        treeNode_20.left = treeNode_15;
//        treeNode_20.right = treeNode_7;
//        treeNode_9.left = treeNode_1;
//        treeNode_9.right = treeNode_2;
//        System.out.println(Arrays.toString(levelOrder(treeNode_3)));
//        System.out.println(levelOrder2(treeNode_3));
//        System.out.println(levelOrder2(creatBinaryTree()));
//        TreeNode node = treeToDoublyList(treeNode1);
//        System.out.println(node.toString());
//        System.out.println(serialize(treeNode1));
//        deserialize(serialize(treeNode1));
//        System.out.println(kthLargest(treeNode1, 1));
//        System.out.println(maxDepth(treeNode1));
//        System.out.println(isBalanced(treeNode1));
//        lowestCommonAncestor(treeNode1,treeNode4,treeNode5);
//        TreeNode treeNode = lowestCommonAncestor2(treeNode1, treeNode4, treeNode5);
//        System.out.println(treeNode);

    }

    /**
     * 二叉树的最近公共祖先
     * 后序遍历
     * https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/
     * @param root
     * @param p
     * @param q
     * @return
     */
    public static TreeNode lowestCommonAncestor2(TreeNode root, TreeNode p, TreeNode q) {
        //1.左右子树没有p和q
        //2.左子树有p和q
        //3.右子树有p和q
        //4.左右子树都能找到，p和q在root两侧
        if (root == p || root == q || root == null) return root;
        TreeNode left = lowestCommonAncestor2(root.left,p,q);
        TreeNode right = lowestCommonAncestor2(root.right,p,q);
        if (right == null && left ==null) return null;
        if (right == null && left !=null) return left;
        if (left == null && right !=null) return right;
        return root; //p和q在左右两侧
    }


    /**
     * 二叉搜索树的最近公共祖先
     * 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”
     * https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
     * @param root
     * @param p
     * @param q
     * @return
     */
    public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root.val < p.val && root.val < q.val) return lowestCommonAncestor(root.right,p,q);
        if (root.val > p.val && root.val > q.val) return lowestCommonAncestor(root.left,p,q);
        return root;
    }

    /**
     * 求 1 + 2 + … + n
     * 求 1+2+...+n ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。
     *
     * 输入: n = 3
     * 输出: 6
     *
     * 输入: n = 9
     * 输出: 45
     *
     * @param n
     * @return
     */
    public static int sumNums(int n) {
        if (n == 0) return 0;
        return n+sumNums(n-1);
    }

    /**
     * 输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。
     * https://leetcode-cn.com/problems/balanced-binary-tree/
     * @param root
     * @return
     */
    public static boolean isBalanced(TreeNode root) {
        if (root == null) return true;
        if (Math.abs(maxDepth(root.left)-maxDepth(root.right))>1) return false;
        return isBalanced(root.left)&&isBalanced(root.right);
    }


    /**
     * 二叉树的深度
     * 输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。
     *
     * 例如：
     *
     * 给定二叉树 [3,9,20,null,null,15,7]，
     *
     *     3
     *    / \
     *   9  20
     *     /  \
     *    15   7
     *
     *返回它的最大深度 3
     * https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/
     * @param root
     * @return
     */
    public static int maxDepth(TreeNode root) {
        if (root == null) return 0;
        return  Math.max(maxDepth(root.left),maxDepth(root.right))+1;
    }

    private static int i = 0;
    private static int val = 0;
    public static int kthLargest(TreeNode root, int k) {
        traval(root,k);
        return val;
    }

    /**
     * 右根左
     * @param cur
     */
    private static void traval(TreeNode cur,int k) {
        if (cur==null) return;
        traval(cur.right,k);
        i++;
        if (i==k) val = cur.val;
        System.out.print("结点值："+cur.val);
        System.out.print("，i="+i);
        System.out.println();
        traval(cur.left,k);
    }

    /**
     * 序列化二叉树
     * 你可以将以下二叉树：
     *     1
     *    / \
     *   2   3
     *      / \
     *     4   5
     * 序列化为 "[1,2,3,null,null,4,5]"
     * https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/990pf2/
     * @param root
     * @return
     */
    public static String serialize(TreeNode root) {
        //层序遍历
        List<Object> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()){
            TreeNode poll = queue.poll();
            if (poll!=null){
                System.out.println(poll.val);
                list.add(poll.val);
                queue.offer(poll.left);
                queue.offer(poll.right);
            }else{
                list.add("null");
            }

        }
        return list.toString();
    }

    /**
     * 反序列化
     * https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/990pf2/
     * @param data
     * @return
     */
    public static TreeNode deserialize(String data) {
        String[] split = data.replace("[", "").replace("]", "").split(",");
        if (split.length==0) return null;
        TreeNode root ;
        if (!"null".equals(split[0].trim())){
            root = new TreeNode(Integer.valueOf(split[0].trim()));
        }else{
            return null;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int i = 1;
        while (!queue.isEmpty()){
            TreeNode poll = queue.poll();
            if (poll!=null){
                poll.left = "null".equals(split[i].trim())? null:new TreeNode(Integer.valueOf(split[i].trim()));
                poll.right = "null".equals(split[i+1].trim())?null:new TreeNode(Integer.valueOf(split[i+1].trim()));
                queue.offer(poll.left);
                queue.offer(poll.right);
                i +=2;
            }else{

            }
        }
        return root;
    }


    private static TreeNode head = new TreeNode(0);//头结点
    private static TreeNode pre ;//当前
    private static TreeNode front ;//第一个

    /**
     * 二叉搜索树与双向链表       结点从小到大排列  采用“左根右” 中序遍历构建 链表
     * https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/5dbies/
     * @param root
     * @return
     */
    public static TreeNode treeToDoublyList(TreeNode root) {
        if(root == null) return null;
        inorderTraversal(root);
//      pre.left = pre;
        head.right = front;
        front.left = pre;
        pre.right = front;
        return head;
    }

    public static void inorderTraversal(TreeNode cur){
        if (cur == null) return;
        inorderTraversal(cur.left);

        if (pre == null){
            pre = cur;
            front = cur;
        }else{
            pre.right = cur;
            cur.left = pre;
            pre = cur;

        }

        System.out.println(cur.val);
        inorderTraversal(cur.right);
    }

    /**
     * 先序创建二叉树
     * @return
     */
    public static TreeNode creatBinaryTree(){
        String line = "";
        TreeNode tree = null;
        try{
            tree = recurCreatBinaryTree();
            System.out.println("创建成功");
        }catch (Exception e){
            e.printStackTrace();
        }

        return tree;
    }

    public static TreeNode recurCreatBinaryTree(){
        System.out.println("输入节点值：");
        Scanner scanner = new Scanner(System.in);
        String str = scanner.nextLine();
        TreeNode treeNode = null;
        if(!"#".equals(str)){
            treeNode = new TreeNode(Integer.valueOf(str));
            System.out.println("根节点："+treeNode.val);
            treeNode.left = recurCreatBinaryTree();
            treeNode.right = recurCreatBinaryTree();
        }
        return treeNode;
    }

    /**
     * 二叉树中和为某一值的路径
     * https://leetcode-cn.com/problems/path-sum-ii/
     * @param root
     * @return
     */
    public static List<List<Integer>> pathSum(TreeNode root, int sum) {
        //寻找二叉树所有从根节点出发到叶子节点的路径

        return null;
    }

    /**
     * 从上到下打印二叉树 II
     * https://leetcode-cn.com/problems/binary-tree-level-order-traversal/
     * @param root
     * @return
     */
    public static List<List<Integer>> levelOrder2(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> row = new ArrayList<>();
            while (size>0){ //循环根节点 加入子节点
                TreeNode treeNode = queue.poll();//出队
                row.add(treeNode.val);
                if (treeNode!=null){
                    if(treeNode.left!=null){
                        queue.offer(treeNode.left);
                    }
                    if(treeNode.right!=null){
                        queue.offer(treeNode.right);
                    }
                }
                size--;
            }
            list.add(row);

        }
        return list;
    }

    /**
     * 从上到下打印二叉树
     * https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/9ackoe/
     * @param root
     * @return
     */
    public static int[] levelOrder(TreeNode root) {
        List<TreeNode> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            TreeNode treeNode = queue.poll();
            if (treeNode!=null){
                list.add(treeNode);
                if(treeNode.left!=null) queue.offer(treeNode.left);
                if(treeNode.right!=null) queue.offer(treeNode.right);
            }

        }
        int[] arr = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
                arr[i] = list.get(i).val;
        }
        return arr;
    }


    /**
     * 对称二叉树
     * https://leetcode-cn.com/problems/symmetric-tree/
     * @param root
     * @return
     */
    public static boolean isSymmetric(TreeNode root) {
        TreeNode mirrorTree = mirrorTree(root);
        //判断两个是否相等
        return isSame(root,mirrorTree);
    }

    /**
     * 判断两个二叉树是否相同
     * @param root
     * @param mirrorTree
     * @return
     */
    public static boolean isSame(TreeNode root,TreeNode mirrorTree) {
        if (root ==null && mirrorTree ==null) return true;
        if (root == null || mirrorTree ==null ) return false;
        if (root.val == mirrorTree.val && isSame(root.left,mirrorTree.left) && isSame(root.right,mirrorTree.right)) {
            return true;
        }else return false;
    }

    /**
     * 二叉树镜像
     * https://leetcode-cn.com/problems/invert-binary-tree/
     * @param root
     * @return
     */
    public static TreeNode mirrorTree(TreeNode root) {
        if (root == null ) return null;
//        System.out.println(root.val);
        TreeNode treeNode = new TreeNode(root.val);
        treeNode.left =  mirrorTree(root.right);
        treeNode.right = mirrorTree(root.left);
        return treeNode;
    }

    private static void bTreeRecur(TreeNode root) {
    }

    /**
     * 树的子结构
     * https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/5dshwe/
     * @param A
     * @param B
     * @return
     */
    public static boolean isSubStructure(TreeNode A, TreeNode B) {
        //先序遍历
        boolean flag = false;
        if (A==null) return false;
        if (reCur(A,B)){
            return true;
        }
        if(isSubStructure(A.left,B) || isSubStructure(A.right,B)) return true;
        return false;
    }

    public static boolean reCur(TreeNode A, TreeNode B){
        if (B == null ) return true;
        if (A != null && B==null) return true;
        if (A.val != B.val) return false;
        if (A.val == B.val && (reCur(A.left,B.left) && reCur(A.right,B.right))){
          return true;
       }else return false;
    }

    /**
     * 机器人的运动范围
     * https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/9h6vo2/
     */
    private static void movingCount() {
        int[][] maps = new int[50][50];
        boolean[][] visited = new boolean[50][50];//0代表未访问过 1 代表可以访问 2 代表不能访问
        int k = 15;
        wfs(maps,visited,0,0,k);
        for (int i = 0; i < visited.length; i++) {
            for (int j = 0; j < visited[0].length; j++) {
                System.out.print(visited[i][j]==true?"*"+" ":0+" ");
            }
            System.out.println();
        }
    }

    /**
     * 广度优先遍历
     * @param maps
     * @param m
     * @param n
     * @param k
     */
    private static void wfs(int[][] maps,boolean[][] visited, int m, int n, int k) {
        //点的上下左右
        Queue<String> queue = new LinkedList<>();

        if(m<0 || m>= maps.length || n<0 || n>=maps[0].length || calNums(m)+calNums(n)>k) {//不符合退回
            return ;
        }
        visited[m][n] = true; //代表访问过
        queue.offer(m+","+n);
        //上下左右0,1,2,3
        while (!queue.isEmpty()){
            String cor = queue.poll();
                for (int i = 0; i < 4; i++) {
                    String next = getNext(cor, i);
                    String[] split = next.split(",");
                    int x =Integer.valueOf(split[0]);
                    int y =Integer.valueOf(split[1]);
                    if(x<0 || x>= maps.length || y<0 || y>=maps[0].length || calNums(x)+calNums(y)>k || visited[x][y] == true ) {//不符合
                        continue;
                    }else{
                        visited[x][y] = true;
                        queue.offer(x+","+y);
                    }
                }

        }

    }

    private static String getNext(String cor, int i) {
        String[] split = cor.split(",");
        if (i==0){
            int m = Integer.valueOf(split[0])+1;
            return m+","+split[1];
        }
        if (i==1){
            int m = Integer.valueOf(split[0])-1;
            return m+","+split[1];
        }
        if (i==2){
            int n = Integer.valueOf(split[1])-1;
            return split[0]+","+n;
        }
        if (i==3){
            int n = Integer.valueOf(split[1])+1;
            return split[0]+","+n;
        }
        return null;
    }

    /**
     * 计算正整数个位数之和
     * @param num
     * @return
     */
    private static int calNums(int num ){
        int temp = 0;
        while (num!=0){
            temp += num%10;
            num = num/10;
        }
        return temp;
    }

    /**
     * 矩阵中的路径
     * https://leetcode-cn.com/problems/word-search/
     */
    private static boolean method() {
        int m = 3;//行
        int n = 4;//列
        char[][] matrix = new char[][]{
            {'A','B','C','E'},
            {'S','F','C','S'},
            {'A','D','E','E'}
        };
        String word = "ABCCED";

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dfs(matrix,word,i,j,m,n,0)) return true;
            }
        }
        return false;
    }

    private static boolean dfs(char[][] c, String word, int i, int j,int m,int n, int k) {
        if (i>=m||i<0 || j>=n||j<0 || c[i][j] != word.charAt(k)) return  false;
        if (k == word.length()-1) return true;
        c[i][j] = '*';
        boolean res = dfs(c,word,i+1,j,m,n,k+1) || dfs(c,word,i-1,j,m,n,k+1) || dfs(c,word,i,j+1,m,n,k+1) || dfs(c,word,i,j-1,m,n,k+1);
        c[i][j] = word.charAt(k);
        return res;
    }


}
